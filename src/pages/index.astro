---
import ImageMod from "@/components/ImageMod.astro";
import Base from "@/layouts/Base.astro";
import { markdownify } from "@/lib/utils/textConverter";
import CallToAction from "@/partials/CallToAction.astro";
import Testimonial from "@/partials/Testimonial.astro";
import type { Button, Feature, Service, accordion } from "@/types";
import { getEntry } from "astro:content";
import { FaCheck } from "react-icons/fa";
import Accordion from "@/shortcodes/Accordion";

interface Homepage {
  banner: {
    title: string;
    content: string;
    image: string;
    button: Button;
    accordion: accordion;
  };
  features: Feature[];
  services: Service[];
}

const homepage = await getEntry("homepage", "-index");
const testimonial = await getEntry("sections", "testimonial");
const call_to_action = await getEntry("sections", "call-to-action");
const { banner, features, services }: Homepage = homepage.data;
---

<Base>
  <!-- Banner -->
  <div id="particle-container">
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
    <div class="particle"></div>
  </div>
  <section class="section pt-14">
    <div class="container">
      <div class="row justify-center">
        <div class="lg:col-7 md:col-9 mb-8 text-center hiddenxx">
          <h1
            set:html={markdownify(banner.title)}
            class="mb-4 text-h3 lg:text-h1"
          />
          <p set:html={markdownify(banner.content)} class="mb-8" />
          {
            banner.button.enable && (
              <a
                class="btn btn-primary"
                href={banner.button.link}
                target={
                  banner.button.link.startsWith("http") ? "_blank" : "_self"
                }
                rel="noopener"
              >
                {banner.button.label}
              </a>
            )
          }
        </div>
        {
          banner.image && (
            <div class="col-12">
              <ImageMod
                src={banner.image}
                height={380}
                width={1200}
                alt="banner"
                format="webp"
              />
            </div>
          )
        }
      </div>
    </div>
  </section>
  <!-- /Banner -->

  <!-- Services -->
  {
    services.map((feature, index: number) => (
      <section class={`section-sm ${index % 2 === 0 && "bg-gradient"}`}>
        <div class="container">
          <div class="row items-center justify-between">
            <div
              class={`mb:md-0 mb-6 md:col-5 ${index % 2 !== 0 && "md:order-2"}`}
            >
              <ImageMod
                src={feature.image}
                height={600}
                width={600}
                alt={feature.title}
                format="webp"
              />
            </div>
            <div class={`md:col-7 lg:col-6 ${index % 2 !== 0 && "md:order-1"}`}>
              <h2 set:html={markdownify(feature.title)} class="mb-4" />
              <p set:html={markdownify(feature.content)} class="mb-8 text-lg" />

              {!feature.accordion.enable && (
              <ul>
                  {feature.bulletpoints.map((bullet: string) => (
                    <li class="relative mb-4 pl-6">
                      <FaCheck className={"absolute left-0 top-1.5"} />
                      <span set:html={markdownify(bullet)} />
                    </li>
                  ))}
                </ul>
                )}

              {feature.accordion.enable && (
              <Accordion client:load title="Identify Growth Pathways">
                We explore potential sources of revenue from a variety of angles.
              </Accordion>

              <Accordion
                client:load
                title="Evolve Your Business"
              >
                We help clients drive purposeful, sustainable and impactful transformation.
              </Accordion>

              <Accordion client:load title="Reimagine Brands">
                We develop marketing and dales stratergies that win in the modern landscape.
              </Accordion>

              <Accordion client:load title="Build Marketing Excellence">
                We build brands that exists at the intersection of business and experience.
              </Accordion>
              )}

              {feature.button.enable && (
                <a class="btn btn-primary mt-5" href={feature.button.link}>
                  {feature.button.label}
                </a>
              )}
            </div>
          </div>
        </div>
      </section>
    ))
  }
  <!-- /Services -->

    <!-- Features -->
    <!-- {
      features.map((feature, index: number) => (
        <section class={`section-sm ${index % 2 === 0 && "bg-gradient"}`}>
          <div class="container">
            <div class="row items-center justify-between">
              <div
                class={`mb:md-0 mb-6 md:col-5 ${index % 2 !== 0 && "md:order-2"}`}
              >
                <ImageMod
                  src={feature.image}
                  height={480}
                  width={520}
                  alt={feature.title}
                  format="webp"
                />
              </div>
              <div class={`md:col-7 lg:col-6 ${index % 2 !== 0 && "md:order-1"}`}>
                <h2 set:html={markdownify(feature.title)} class="mb-4" />
                <p set:html={markdownify(feature.content)} class="mb-8 text-lg" />
                <ul>
                  {feature.bulletpoints.map((bullet: string) => (
                    <li class="relative mb-4 pl-6">
                      <FaCheck className={"absolute left-0 top-1.5"} />
                      <span set:html={markdownify(bullet)} />
                    </li>
                  ))}
                </ul>
                {feature.button.enable && (
                  <a class="btn btn-primary mt-5" href={feature.button.link}>
                    {feature.button.label}
                  </a>
                )}
              </div>
            </div>
          </div>
        </section>
      ))
    } -->
    <!-- /Features -->


  <!-- <Testimonial testimonial={testimonial} /> -->
  <CallToAction call_to_action={call_to_action} />
</Base>

<script>
const observer = new IntersectionObserver((entries) => {
  entries.forEach((entry) => {
    console.log(entry)
    if (entry.isIntersecting) {
      entry.target.classList.add('showxx');
    } 
    // else {
    //   entry.target.classList.remove('showxx');
    // }
  });
});

const hiddenElements = document.querySelectorAll('.hiddenxx');
hiddenElements.forEach((el) => observer.observe(el));

const ImageObserver = new IntersectionObserver((entries) => {
  entries.forEach((entry) => {
    console.log(entry)
    if (entry.isIntersecting) {
      entry.target.classList.add('showImg');
    } 
    // else {
    //   entry.target.classList.remove('showxx');
    // }
  });
});

const hiddenImageElements = document.querySelectorAll('.hiddenImg');
hiddenImageElements.forEach((el) => ImageObserver.observe(el));
</script>